- The url general description for getting the weather description image from openweather api is given, therefore there was no need to look for alternative representations that map to each decription.

- The search tem(user input) is also kept for each search, and displayed in some capacity to remove any confusion with city names not matching search term, for example, 'Goromonzi', yields another city called 'Epworth' in Zimbabwe, but the 2 places (viewed as suburbs) are not close, and thus this might be a source of confusion.

- On the other hand, the 'find' query that was used as a guide to how an optimal display would look like does not contain information on flag icons, therefore an alternative was to get a flag directory from another source, and use the country code information to map each country to a flag icon in a way similar to how we got the weather description icon, but referencing a local source. This was later shelved, as since the image for each country is viewable on each find page, it would imply there is a way to get the flags from the source the api site itself uses. Thus, by using the inspector, the flags directory in images was found, and references deducted from a few searches.

- The display initially relied on paragraphs and images placed within a division for each matching search case, but after viewing how a 'find' query response is displayed on the api site itself, it was decided to adopt a similar approach and use tables for each matching search case, then adding this to the script, which can be removed from the main '.html' file for seperation of the presenation and functional code.

- Consideration was made for app users who are more knowledgable on the field, or might neeed to view extra weather information not made available by the 'find' query of the api site itself, for instance, information about the humidity, and wind direction; so an extra information section has been made available for such users, which is optional to view(per search response), and can be left hidden for cases where it is unnecessary to display it.

- The 'find' query refreshes per search prompt, but to allow comparison of weather conditions for different places, if time allows during this implementation, it will be by choice whether to allow multi-search display or refresh per search, otherwise, for the time being, it will be on a multi-search display basis.

- A history function(should time allow), will be implemented, and an anchor system used in conjuction with the history container to allow links to previous searches on the multi_search display option, such that if a recent search term re-appears, the app automatically follows a link on the page to where the information is displayed. Another idea would be to check number of search terms above the current query, and if too many, just move the link to the bottom/current position of scrolling on the page to cater for comparison with content being currently viewed.